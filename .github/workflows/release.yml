name: Create Github Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'

jobs:

  build-arm6:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: build backend plugin
        run: make build-backend-cross-linux-arm6
      - name: Upload dist folder
        uses: actions/upload-artifact@v2
        with:
          name: plugin-arm6
          path: ./dist/

  build-arm7:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: build backend plugin
        run: make build-backend-cross-linux-arm7
      - name: Upload dist folder
        uses: actions/upload-artifact@v2
        with:
          name: plugin-arm7
          path: ./dist/

  build-arm64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: build backend plugin
        run: make build-backend-cross-linux-arm64
      - name: Upload dist folder
        uses: actions/upload-artifact@v2
        with:
          name: plugin-arm64
          path: ./dist/

  build-linux64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install go dependencies
        run: make install-go
      - name: build linux version
        run: make build-backend
      - name: Upload linux binary
        uses: actions/upload-artifact@v2
        with:
          name: plugin-linux64
          path: ./dist/

  build-windows64:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install go dependencies
        run: make install-go
      - name: build windows version
        run: make build-backend
      - name: Upload windows binary
        uses: actions/upload-artifact@v2
        with:
          name: plugin-windows64
          path: ./dist/

  build-darwin64:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install go dependencies
        run: make install-go
      - name: build darwin version
        run: make build-backend
      - name: Upload darwin binary
        uses: actions/upload-artifact@v2
        with:
          name: plugin-darwin64
          path: ./dist/

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-arm6
      - build-arm7
      - build-arm64
      - build-linux64
      - build-windows64
      - build-darwin64

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.18.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.18.x
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
            ${{ runner.OS }}-
      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Get the version
        id: get_version
        run: echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
      
      - name: Build frontend
        run: |
          npm version ${{ steps.get_version.outputs.version }} --no-git-tag-version
          make build-frontend

      - name: Get plugin metadata
        id: metadata
        run: |
          export GRAFANA_PLUGIN_ARTIFACT=frser-sqlite-datasource-${{ steps.get_version.outputs.version }}.zip
          export GRAFANA_PLUGIN_ARTIFACT_ARM7=frser-sqlite-datasource-arm7-${{ steps.get_version.outputs.version }}.zip
          echo "::set-output name=archive::${GRAFANA_PLUGIN_ARTIFACT}"
          echo "::set-output name=archive-arm7::${GRAFANA_PLUGIN_ARTIFACT_ARM7}"

      - name: Check changelog
        run: |
          if ! grep -q -F "## [${{ steps.get_version.outputs.version }}]" CHANGELOG.md; then
            echo "Error: The latest (## [${{ steps.get_version.outputs.version }}]) tag was not found in the CHANGELOG.md." 1>&2
            exit 1
          fi

      - name: Download arm7 binary
        uses: actions/download-artifact@v2
        with:
          name: plugin-arm7
          path: ./dist/
      - name: package-and-zip-arm7
        run: make package-and-zip-arm7
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}

      - name: Download linux64 binary
        uses: actions/download-artifact@v2
        with:
          name: plugin-linux64
          path: ./dist/
      - name: Download arm6 binary
        uses: actions/download-artifact@v2
        with:
          name: plugin-arm6
          path: ./dist/
      - name: Download arm64 binary
        uses: actions/download-artifact@v2
        with:
          name: plugin-arm64
          path: ./dist/
      - name: Download windows64 binary
        uses: actions/download-artifact@v2
        with:
          name: plugin-windows64
          path: ./dist/
      - name: Download darwin64 binary
        uses: actions/download-artifact@v2
        with:
          name: plugin-darwin64
          path: ./dist/
      - name: package-and-zip
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
        run: |
          make package-and-zip
          md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive }}.md5
          md5sum ${{ steps.metadata.outputs.archive-arm7 }} > ${{ steps.metadata.outputs.archive-arm7 }}.md5

      - name: Read changelog
        id: changelog
        run: |
          awk '/^## / {s++} s == 1 {print}' CHANGELOG.md > release_notes.md
          echo "::set-output name=path::release_notes.md"

      - name: Check prerelease
        id: check_prerelease
        run: |
          if [[ ${{ github.ref }} =~ "rc" ]]; then
            echo "::set-output name=is_prerelease::true"
          else
            echo "::set-output name=is_prerelease::false"
          fi

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: ${{ steps.changelog.outputs.path }}
          prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}

      - name: Add arm7 plugin to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive-arm7 }}
          asset_name: ${{ steps.metadata.outputs.archive-arm7 }}
          asset_content_type: application/zip
      
      - name: Add arm7 checksum to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive-arm7 }}.md5
          asset_name: ${{ steps.metadata.outputs.archive-arm7 }}.md5
          asset_content_type: text/plain

      - name: Add plugin to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive }}
          asset_name: ${{ steps.metadata.outputs.archive }}
          asset_content_type: application/zip

      - name: Add checksum to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive }}.md5
          asset_name: ${{ steps.metadata.outputs.archive }}.md5
          asset_content_type: text/plain
